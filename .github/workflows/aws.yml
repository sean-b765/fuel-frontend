name: Build image and push to ECR

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: gofuel
  ROLE: arn:aws:iam::476720619618:role/github-actions-access

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Debug OIDC Token
      shell: bash
      run: |
        echo ">> ACTIONS_ID_TOKEN_REQUEST_URL: $ACTIONS_ID_TOKEN_REQUEST_URL"
        echo ">> ACTIONS_ID_TOKEN_REQUEST_TOKEN: $ACTIONS_ID_TOKEN_REQUEST_TOKEN"

        # fetch the raw JWT
        jwt=$(curl -sSf \
          -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL")

        echo ">> Raw JWT:"
        echo "$jwt"

        # split into header.payload.signature
        payload=$(echo "$jwt" | cut -d'.' -f2)

        echo ">> Base64‐URL payload (unpadded):"
        echo "$payload"

        # translate URL-safe into standard base64, pad, then decode
        # (the -A flag makes openssl ignore line breaks)
        decoded=$(echo "$payload" \
          | tr '_-' '/+' \
          | awk '{printf "%s", $0}' \
          | sed 's/\(.\{4\}\)/\1\n/g' \
          | openssl base64 -d -A)

        echo ">> Decoded payload JSON:"
        echo "$decoded" | jq .


    - name: Configure AWS credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.ROLE }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that our lambda can pull the newest image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
